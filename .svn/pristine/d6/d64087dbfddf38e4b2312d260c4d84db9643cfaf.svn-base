package cn.mstar.store.ownee.utils;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Build;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;

import com.readystatesoftware.systembartint.SystemBarTintManager;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import cn.mstar.store.activity.MainActivity;
import cn.mstar.store.app.MyApplication;
import cn.mstar.store.entity.BuyProductEntity;
import cn.mstar.store.ownee.activity.GoodsManagementActivity;
import cn.mstar.store.ownee.activity.LoginActivity;
import cn.mstar.store.ownee.activity.RegisterActivity;
import cn.mstar.store.ownee.db.entityToSave.ProAndSpecialIdz;
import cn.mstar.store.ownee.entity.OrderDetailsEntity;
import cn.mstar.store.ownee.interfaces.OnResultStatusListener;
import cn.mstar.store.util.L;
import cn.mstar.store.util.Util;
import cn.mstar.store.util.VolleyRequest;

/**
 * Created by Ultima on 7/10/2015.
 */
public class Utils {

	public static int convertPxtoDip(int pixel, Context context){

		float scale = context.getResources().getDisplayMetrics().density;
		int dips=(int) ((pixel * scale) + 0.5f);
		return dips;
	}

	public static int convertDiptoPx(int dips, Context context){

		float scale = context.getResources().getDisplayMetrics().density;
		int pixel= (int)((dips - 0.5f) / scale);
		return pixel;
	}

//	Utils.LoginSuccess((MyApplication) LoginActivity.this.getApplication(), username, password, tokenKey, pic, points);
	public static void LoginSuccess(MyApplication myApplication,String loginName, String username, String password, String tokenKey, String pic, int points) {

		SharedPreferences channel= myApplication.getApplicationContext().getSharedPreferences(Constants.SHARED_PREFS_NAME, Context.MODE_PRIVATE);
		Editor editor = channel.edit();
		editor.putString (Constants.SP_USERNAME, loginName);
		editor.putString(Constants.SP_PASSWORD, password);
//		editor.putString(Constants.SP_TOKENKEY, tokenKey);
		editor.commit();
		myApplication.frg_isFrg_shoppingcart_needUpdate = true;
		myApplication.isFrg_me_needUpdate = true;
		myApplication.username = username;
		myApplication.password = password;
		myApplication.tokenKey = tokenKey;
		myApplication.pic = pic;
		myApplication.points = ""+points;
	}

	public static void LoginClean(MyApplication myApplication, boolean bool) {

		Context mctx = myApplication.getApplicationContext();
		SharedPreferences channel= mctx.getSharedPreferences(Constants.SHARED_PREFS_NAME, Context.MODE_PRIVATE);
		Editor editor = channel.edit();
		if (bool) {
//			editor.putString(Constants.SP_USERNAME, "");
			editor.putString(Constants.SP_PASSWORD, "");
		}
		editor.putString(Constants.SP_TOKENKEY, "");
		editor.commit();
		myApplication.cleanLoginInfo ();
	}

	public static String getTokenKey (MyApplication myApplication) {
//		SharedPreferences channel= mctx.getSharedPreferences(Constants.SHARED_PREFS_NAME, Context.MODE_PRIVATE);
//		return channel.getString(Constants.SP_TOKENKEY, "0");
		return myApplication.tokenKey;
	}

	public static void updateShoppingCart(MyApplication app, final OnResultStatusListener listener) {

		List<ProAndSpecialIdz> items = ProAndSpecialIdz.getAll();

		Context mctx = app.getApplicationContext();
		if (items != null)
			VolleyRequest.addInShoppingCart(mctx, toArray(items), Utils.getTokenKey(app), new OnResultStatusListener() {

				@Override
				public void success(String result) {
					// tell the  caller that we are done.
					ProAndSpecialIdz.cleanLocal ();
					if (listener != null)
						listener.success("");
				}

				@Override
				public void failure(String error) {
					if (listener != null)
						listener.failure("");
				}
			});
	}

	public static String encodeChinese(String str) {
		String result = "";
		for(char ch : str.toCharArray())
			result += "\\u" + Integer.toHexString(ch | 0x10000).substring(1);
		System.out.print(result);
		return result;
	}


	public static ProAndSpecialIdz[] toArray(List<ProAndSpecialIdz> itemz) {

		ProAndSpecialIdz[] v = new ProAndSpecialIdz[itemz.size()];

		for (int i = 0; i < itemz.size(); i++) {
			v[i] = itemz.get(i);
//			L.d("XXX", v[]);
		}
		return v;
	}

	public static String formatedPrice(Double total) {
		DecimalFormat df = new DecimalFormat("#.00");
		String priceFormatted = df.format(total);
		return priceFormatted;
	}

	public static List<BuyProductEntity> orderItemzToProductEntity(OrderDetailsEntity.OrderItems[] orderItems) {

		List<BuyProductEntity> data = new ArrayList<>();
		for (OrderDetailsEntity.OrderItems instance: orderItems) {
			BuyProductEntity tmp = new BuyProductEntity(instance);
			data.add(tmp);
		}
		return data;
	}

	public static class ReceiverManager {

		private static List<BroadcastReceiver> receivers = new ArrayList<BroadcastReceiver>();
		private static ReceiverManager ref;
		private Context context;


		private ReceiverManager(Context context){
			this.context = context;
		}

		public static synchronized ReceiverManager init(Context context) {
			if (ref == null) ref = new ReceiverManager(context);
			return ref;
		}

		public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter intentFilter){
			receivers.add(receiver);
			Intent intent = context.registerReceiver(receiver, intentFilter);
			Log.i(getClass().getSimpleName(), "registered receiver: "+receiver+"  with filter: "+intentFilter);
			Log.i(getClass().getSimpleName(), "receiver Intent: "+intent);
			return intent;
		}

		public boolean isReceiverRegistered(BroadcastReceiver receiver){
			boolean registered = receivers.contains(receiver);
			Log.i(getClass().getSimpleName(), "is receiver "+receiver+" registered? "+registered);
			return registered;
		}

		public void unregisterReceiver(BroadcastReceiver receiver){
			if (isReceiverRegistered(receiver)){
				receivers.remove(receiver);
				context.unregisterReceiver(receiver);
				Log.i(getClass().getSimpleName(), "unregistered receiver: " + receiver);
			}
		}
	}

	public static void cleanSharedPref(Context mContext) {

		// TODO Auto-generated method stub
		SharedPreferences channel= mContext.getSharedPreferences(Constants.SHARED_PREFS_NAME, Context.MODE_PRIVATE);
		//		loggedState = channel.getBoolean("USER_LOGGED", false);
		//		username = channel.getString(Constants.SP_USERNAME, "");
		//		password = channel.getString(Constants.SP_PASSWORD, "");
		Editor editor = channel.edit();
		editor.putString(Constants.SP_PASSWORD, "");
		editor.putString(Constants.SP_USERNAME, "");
		editor.putBoolean("USER_LOGGED", false);
		editor.commit();
	}


	public static int getScreenHeigth (Context context) {

		DisplayMetrics metrics = new DisplayMetrics();
		((GoodsManagementActivity) context).getWindowManager().getDefaultDisplay().getMetrics(metrics);
		return metrics.heightPixels;
	}

	public static int getScreenWidth (Context context) {

		DisplayMetrics metrics = new DisplayMetrics();
		((GoodsManagementActivity) context).getWindowManager().getDefaultDisplay().getMetrics(metrics);
		return metrics.widthPixels;
	}


	public static void setNavigationBarColor(Activity activity, int colorId) {

		/*if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
			Window window = activity.getWindow();
			window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
			window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
					| View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
			window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
			window.setNavigationBarColor(colorId);
		}

		if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {
			activity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION, WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
			SystemBarTintManager manager = new SystemBarTintManager(activity);
			manager.setNavigationBarTintEnabled(true);
			manager.setNavigationBarTintColor(colorId);
		}*/
	}



	public static void setStatusBarColor(Activity activity, int colorId) {

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
			SystemBarTintManager manager = new SystemBarTintManager(activity);
			manager.setStatusBarTintEnabled(true);
			manager.setStatusBarTintColor(colorId);
		}
	}



}
