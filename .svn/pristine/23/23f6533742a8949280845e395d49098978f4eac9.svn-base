package cn.mstar.store.ownee.views;

import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.JsonElement;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import cn.mstar.store.R;
import cn.mstar.store.activity.IndentDetailsActivity;
import cn.mstar.store.app.MyAction;
import cn.mstar.store.app.MyApplication;
import cn.mstar.store.ownee.adapter.GoodsManagement_InnerAdapter;
import cn.mstar.store.ownee.entity.OrdersItem;
import cn.mstar.store.ownee.utils.NewLink;
import cn.mstar.store.ownee.utils.Utils;
import cn.mstar.store.util.CustomToast;
import cn.mstar.store.util.L;
import cn.mstar.store.util.VolleyRequest;
import cn.mstar.store.view.LoadingDialog;

public class RefreshableMockFragment extends Fragment {


    private static final String TK = "tokenKey";
    // views
    protected LinearLayout lny_loading_layout, lny_network_error_layout, lny_noresult;
    protected ListView lv_list;
    private View actionbar;

    private static final String LINK = "LINK";
    private View rootView;
    private int preLast = 0;
    private int PAGE_COUNT = 1;
    private String BASE_LINK;
    private GoodsManagement_InnerAdapter adapter;
    private android.view.View footerview;
    private String tokenKey;
    private int maxPage = -1, totalItem = -1;
    private int pageCount = 10;
    private boolean finalFooterSet = false;
    private TextView wifi_retry;

    public static Fragment getInstance (String link, String tk) {

        Fragment frg = new RefreshableMockFragment();
        Bundle argz = new Bundle();
        argz.putString(LINK, link);
        argz.putString(TK, tk);
        frg.setArguments(argz);
        return frg;
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {

        rootView = inflater.inflate(R.layout.fragment_refreshable_mock, container, false);
        lv_list = (ListView) rootView.findViewById(R.id.listview);
        initViews(rootView);
        ButterKnife.bind(rootView);
        setRetainInstance(true);
        adapter = null;
        BASE_LINK = getArguments().getString(LINK);
        this.tokenKey = getArguments().getString(TK);
        BASE_LINK = BASE_LINK+"&key="+tokenKey;
        // retrieve the data and be sure
        // need an adapter
        PAGE_COUNT = 1;
        loadData();
        hide_all(rootView);
        getLny_loading_layout(rootView).setVisibility(View.VISIBLE);
        lv_list.setOnScrollListener(new AbsListView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(AbsListView view, int scrollState) {

            }

            @Override
            public void onScroll(AbsListView lw, final int firstVisibleItem,
                                 final int visibleItemCount, final int totalItemCount) {

                // Make your calculation stuff here. You have all your
                // needed info from the parameters of this function.

                // Sample calculation to determine if the last
                // item is fully visible.
//                firstVisibleItem + visibleItemCount >= totalItemCount-1
                final int lastItem = firstVisibleItem + visibleItemCount;
                if (lastItem >= totalItemCount - 1) {
                    if (preLast != lastItem) { //to avoid multiple calls for last item
                        preLast = lastItem;
//                                CustomToast.mSystemToast(getActivity(), "bottom reached");
                        // append data.
//                        if (!finalFooterSet)
                        appendData();
//                            L.d("XXX", "append data");
//                        } /*else {
//                            setFinalFooter();
//                        }
                        L.d("bottom of listivew ");
                    }
                }

            }
        });
        lv_list.setOnItemClickListener(new AdapterView.OnItemClickListener() {


            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                final LoadingDialog dialog = new LoadingDialog(getActivity());
                dialog.show();

                final OrdersItem orderItem = (OrdersItem) adapter.getItem(position);
                final String link = NewLink.GOPAY_FOR_ORDER + "&key=" + Utils.getTokenKey((MyApplication) getActivity().getApplication()) + "&OrderNum=" + orderItem.orderId;
//                L.d("XXX", link);
                VolleyRequest.GetCookieRequest(getActivity(), link, new VolleyRequest.HttpStringRequsetCallBack() {
                    @Override
                    public void onSuccess(String result) {

                        L.d("append link "+link);
                        L.d("append res "+result);
                        // check if the answer looks like something...
                        L.d("requestUrl", result);
                        if (!"".equals(result)) {
                            Intent intent = new Intent(getActivity(), IndentDetailsActivity.class);
                            intent.setAction(MyAction.goPayAction);
                            // the actions have to get down before we jump to the next.
                            L.e(orderItem.orderId);
                            intent.putExtra("data", result);
                            if (dialog != null) {
                                dialog.cancel();
                                dialog.dismiss();
                            }
                            startActivity(intent);
                        } else {
                            CustomToast.makeToast(getActivity(), getString(R.string.error), Toast.LENGTH_SHORT);
                        }
                        if (dialog != null) {
                            dialog.cancel();
                            dialog.dismiss();
                        }
                    }

                    @Override
                    public void onFail(String error) {
                        CustomToast.makeToast(getActivity(), error, Toast.LENGTH_SHORT);
                        if (dialog != null) {
                            dialog.cancel();
                            dialog.dismiss();
                        }
                    }
                });
            }
        });

        wifi_retry = (TextView) rootView.findViewById(R.id.wifi_retry);
        wifi_retry.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                reload ();
            }
        });


        return rootView;
    }

    private void reload() {
        PAGE_COUNT = 1;
        loadData();
        hide_all(rootView);
        getLny_loading_layout(rootView).setVisibility(View.VISIBLE);
    }

    private void appendData() {
        if (maxPage == -1 || PAGE_COUNT < maxPage) {
            PAGE_COUNT++;
            loadData();
        } else {
            noResultFound ();
        }
    }




    private void loadData() {

        String baseLink = BASE_LINK + "&curpage="+PAGE_COUNT+ "&page="+pageCount;
        L.d("XXX ORDER ",baseLink );
        VolleyRequest.GetCookieRequest(getActivity(), baseLink, new VolleyRequest.HttpStringRequsetCallBack() {

            @Override
            public void onSuccess(String result) {

                L.d("XXX ORDER ", result);
                List<OrdersItem> order_items = null;
                try {
                    Gson gson = new Gson();
                    JsonElement elm = gson.fromJson(result, JsonElement.class).getAsJsonObject().get("data");
                    if (maxPage == -1) {
                        // get the max item count.
                        totalItem = elm.getAsJsonObject().get("list_count").getAsInt();
                        // each page needs
                        maxPage = totalItem / pageCount;
                        if (!(totalItem % pageCount == 0)) {
                            maxPage++;
                        }
                    }
//					L.d("XXX ELEM 1 " + elm.toString());
                    OrdersItem.Prototype tmp = gson.fromJson(elm, OrdersItem.Prototype.class);
                    if (order_items == null) {
                        order_items = new ArrayList<OrdersItem>();
                    }
                    if (tmp != null && tmp.OrderList != null) {
                        for (OrdersItem.Prototype.OrderList little : tmp.OrderList) {
                            OrdersItem item = new OrdersItem(little);
                            order_items.add(item);
                        }
                        if (order_items.size() > 0) {
                            setUpAdapter(order_items);
                        } else
                            noResultFound();
                    } else {
                        noResultFound();
                    }
                } catch (NullPointerException e) {
                    e.printStackTrace();
                    noResultFound();
                } catch (Exception e) {
                    e.printStackTrace();
                    noResultFound();
                } finally {
                    noResultFound();
                }
            }

            @Override
            public void onFail(String error) {
                // check if the problem comes from the network, if yes... then shows ~
                // this can only be caused by network
                networkExceptionError();
            }
        });

    }

    private void setUpAdapter(List<OrdersItem> order_items) {

        L.d("XXX CCC "+ adapter);
        // set up adapter.
        if (adapter == null) {
            adapter = new GoodsManagement_InnerAdapter(getActivity(), order_items);
            if (lv_list != null) {
                footerview = LayoutInflater.from(getActivity()).inflate(R.layout.product_list_footer_view, null);
                lv_list.addFooterView(footerview);
                lv_list.setAdapter(adapter);
                hide_all(rootView);
                lv_list.setVisibility(View.VISIBLE);
            }
        } else {
            if (PAGE_COUNT == 1)
                adapter = new GoodsManagement_InnerAdapter(getActivity(), order_items);
            else
                adapter.addAll(order_items);
        }

        if (order_items.size() < pageCount) {
            L.e("ZXXX", "orderitemsize " + order_items + " pageCount" + pageCount);
            setFinalFooter();
        }
        setFinalFooter();
    }

    View lny_loading ;
    View loadingCompletet;

    private void setFinalFooter() {
//        L.d("XXX", "total is "+totalItem+" showed itemz are "+adapter.getCount()+" finalFooterSet is "+finalFooterSet);
        if (lny_loading == null)
            lny_loading = footerview.findViewById(R.id.lny_loading_layout);
        if ((!finalFooterSet && totalItem == adapter.getCount()) || (lny_loading.getVisibility() == View.VISIBLE && totalItem == adapter.getCount())) {
//            lv_list.removeFooterView(footerview);
//            View lny_loading = footerview.findViewById(R.id.lny_loading_layout);
            View loadingCompletet = footerview.findViewById(R.id.tv_loadingcomplete);
            lny_loading.setVisibility(View.GONE);
            loadingCompletet.setVisibility(View.VISIBLE);
//            lv_list.setVisibility(View.INVISIBLE);
//            footerview = LayoutInflater.from(getActivity()).inflate(R.layout.product_list_footer_view_done, null);
//            lv_list.addFooterView(footerview);
//            lv_list.setVisibility(View.VISIBLE);
            lv_list.setOnScrollListener(null);
            if (lny_loading.getVisibility() == View.GONE && loadingCompletet.getVisibility() == View.VISIBLE)
                finalFooterSet = true;
        }
    }

    protected void hide_all (View view) {
        getLny_loading_layout(view).setVisibility(View.GONE);
        getLny_network_error_layout(view).setVisibility(View.GONE);
        getLny_noresult(view).setVisibility(View.GONE);
        getLv_list(view).setVisibility(View.GONE);
    }


    public ListView getLv_list(View view) {
        if (lv_list == null)
            lv_list = (ListView) view.findViewById(R.id.listview);
        return lv_list;
    }


    protected void networkExceptionError() {

        hide_all(rootView);
        getLny_network_error_layout(rootView).setVisibility(View.VISIBLE);
    }


    protected void noResultFound() {

        // if the listadapter is = 0... then this... otherwise, the only the bottom progress stuff.

        if (adapter == null) {
            hide_all(rootView);
            getLny_noresult(rootView).setVisibility(View.VISIBLE);
        } else {
            // change footer
            setFinalFooter();
        }
    }

    protected void initViews (View view) {
        lny_loading_layout = (LinearLayout) view.findViewById(R.id.lny_loading_layout);
        lny_network_error_layout = (LinearLayout) view.findViewById(R.id.lny_network_error_view);
        lny_noresult = (LinearLayout) view.findViewById(R.id.lny_no_result);
        actionbar = view.findViewById(R.id.the_title_layout);
    }


    protected LinearLayout getLny_loading_layout(View v) {
        if (lny_loading_layout == null)
            lny_loading_layout = (LinearLayout) v.findViewById(R.id.lny_loading_layout);
        return lny_loading_layout;
    }


    protected LinearLayout getLny_network_error_layout(View v) {
        if (lny_network_error_layout == null)
            lny_network_error_layout = (LinearLayout) v.findViewById(R.id.lny_network_error_view);
        return lny_network_error_layout;
    }


    protected LinearLayout getLny_noresult(View v) {
        if (lny_noresult == null)
            lny_noresult = (LinearLayout) v.findViewById(R.id.lny_no_result);
        return lny_noresult;
    }




}
